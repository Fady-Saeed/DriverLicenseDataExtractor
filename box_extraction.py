{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#imports\n",
    "\n",
    "import cv2\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "\n",
    "#define a function to display images in large size\n",
    "\n",
    "def display_img(img,name):\n",
    "    \n",
    "    output = img\n",
    "    fig = plt.figure(figsize=(12,10))\n",
    "    ax = fig.add_subplot(111)\n",
    "    plt.title(name)\n",
    "    ax.imshow(output)\n",
    "    \n",
    "    \n",
    "\n",
    "\n",
    "\n",
    "def get_box(img):\n",
    "\n",
    "    x = img.shape[0]\n",
    "    y = img.shape[1]\n",
    "\n",
    "   \n",
    "\n",
    "    #the required box is black, so if we use closing it will be removed\n",
    "    #then by subtracting original from closing we remove background and get photo containing words and box \n",
    "\n",
    "\n",
    "    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (11,11))\n",
    "    close = cv2.morphologyEx(img, cv2.MORPH_CLOSE, kernel)\n",
    "\n",
    "    subt = cv2.subtract(close, img)\n",
    "\n",
    "    #use binary thresholding to remove background noise\n",
    "\n",
    "    subt_max = np.max(subt)\n",
    "    percent = 0.5\n",
    "\n",
    "    rey, thresh_out = cv2.threshold(subt, percent*subt_max, 255, cv2.THRESH_BINARY)\n",
    "\n",
    "    # use hough lines to get the boundary of the box\n",
    "\n",
    "    minLineLength = 30\n",
    "    maxLineGap = 1\n",
    "\n",
    "    img2 =  np.zeros(img.shape)\n",
    "\n",
    "    lines = cv2.HoughLinesP(thresh_out,1,np.pi/360, 150, minLineLength,maxLineGap)\n",
    "\n",
    "    x_min = img2.shape[1]\n",
    "    x_max = 0\n",
    "\n",
    "    y_min = img2.shape[0]\n",
    "    y_max = 0\n",
    "\n",
    "    #3 distances with 6 points\n",
    "\n",
    "\n",
    "    for line in lines:\n",
    "        for x1,y1,x2,y2 in line:\n",
    "\n",
    "            dist = np.square(x2-x1) + np.square(y2-y1)\n",
    "\n",
    "\n",
    "            if(dist < 2500):\n",
    "                continue\n",
    "\n",
    "\n",
    "            tmp = min(y1, y2)\n",
    "\n",
    "            if(y_min > tmp):\n",
    "                y_min = tmp\n",
    "\n",
    "            tmp = min(x1, x2) \n",
    "\n",
    "            if(x_min > tmp):\n",
    "                x_min = tmp\n",
    "\n",
    "\n",
    "            tmp = max(y1, y2)\n",
    "\n",
    "            if(y_max < tmp):\n",
    "                y_max = tmp\n",
    "\n",
    "            tmp = max(x1, x2)\n",
    "\n",
    "            if(x_max < tmp):\n",
    "                x_max = tmp   \n",
    "\n",
    "\n",
    "\n",
    "\n",
    "            cv2.line(img2,(x1,y1),(x2,y2),(255,0,0),1)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    delta  = 20\n",
    "\n",
    "    y_begin = 0\n",
    "    y_end = img2.shape[0]\n",
    "\n",
    "    x_begin = 0\n",
    "    x_end = img2.shape[1]\n",
    "\n",
    "\n",
    "    if( y_min-delta >= 0):\n",
    "        y_begin = y_min-delta\n",
    "\n",
    "    if( y_max + delta <= y_end):\n",
    "        y_end = y_max + delta\n",
    "\n",
    "    if( x_min-delta >= 0):\n",
    "        x_begin = x_min-delta\n",
    "\n",
    "    if( y_max + delta <= y_end):\n",
    "        x_end = x_max + delta\n",
    "\n",
    "\n",
    "    slice = np.copy(img[y_begin: y_end, x_begin: x_end])\n",
    "\n",
    "    return slice\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
